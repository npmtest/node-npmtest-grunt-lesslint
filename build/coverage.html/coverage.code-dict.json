{"/home/travis/build/npmtest/node-npmtest-grunt-lesslint/test.js":"/* istanbul instrument in package npmtest_grunt_lesslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-lesslint/lib.npmtest_grunt_lesslint.js":"/* istanbul instrument in package npmtest_grunt_lesslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_lesslint = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_lesslint = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-lesslint/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-lesslint && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_lesslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_lesslint\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_lesslint.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_lesslint.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_lesslint.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_lesslint.__dirname + '/lib.npmtest_grunt_lesslint.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-lesslint/node_modules/grunt-lesslint/tasks/less-lint-task.js":"(function() {\n  var CSSLint, LessCachedFile, LessFile, LintCache, LintErrorOutput, Parser, _, async, chalk, crypto, defaultLessOptions, findLessMapping, findPropertyLineNumber, getPropertyName, path, ref, ref1, stripPath;\n\n  CSSLint = require('csslint').CSSLint;\n\n  Parser = require('less').Parser;\n\n  ref = require('./lib/lint-utils'), findLessMapping = ref.findLessMapping, findPropertyLineNumber = ref.findPropertyLineNumber, getPropertyName = ref.getPropertyName;\n\n  LintCache = require('./lib/lint-cache').LintCache;\n\n  ref1 = require('./lib/less-file'), LessFile = ref1.LessFile, LessCachedFile = ref1.LessCachedFile;\n\n  LintErrorOutput = require('./lib/lint-error-output');\n\n  async = require('async');\n\n  path = require('path');\n\n  crypto = require('crypto');\n\n  stripPath = require('strip-path');\n\n  _ = require('lodash');\n\n  chalk = require('chalk');\n\n  defaultLessOptions = {\n    cleancss: false,\n    compress: false,\n    dumpLineNumbers: 'comments',\n    optimization: null,\n    syncImport: true\n  };\n\n  module.exports = function(grunt) {\n    var writeToFormatters;\n    writeToFormatters = function(options, results) {\n      var formatters;\n      formatters = options.formatters;\n      if (!_.isArray(formatters)) {\n        return;\n      }\n      return formatters.forEach(function(arg) {\n        var dest, filePath, formatter, formatterOutput, i, id, len, message, ref2, result;\n        id = arg.id, dest = arg.dest;\n        if (!(id && dest)) {\n          return;\n        }\n        formatter = CSSLint.getFormatter(id);\n        if (formatter == null) {\n          return;\n        }\n        formatterOutput = formatter.startFormat();\n        for (filePath in results) {\n          result = results[filePath];\n          ref2 = result.messages;\n          for (i = 0, len = ref2.length; i < len; i++) {\n            message = ref2[i];\n            if (message.lessLine) {\n              message.line = message.lessLine.line - 1;\n              message.col = message.lessLine.column - 1;\n            }\n          }\n          formatterOutput += formatter.formatResults(result, filePath, {});\n        }\n        formatterOutput += formatter.endFormat();\n        return grunt.file.write(dest, formatterOutput);\n      });\n    };\n    grunt.registerMultiTask('lesslint', 'Validate LESS files with CSS Lint', function() {\n      var done, errorCount, fileCount, options, queue, results, warningCount;\n      options = this.options({\n        less: grunt.config.get('less.options'),\n        csslint: grunt.config.get('csslint.options'),\n        imports: void 0,\n        customRules: void 0,\n        cache: false,\n        failOnError: true,\n        failOnWarning: true\n      });\n      fileCount = 0;\n      errorCount = 0;\n      warningCount = 0;\n      results = {};\n      queue = async.queue(function(file, callback) {\n        var lessFile;\n        grunt.verbose.write(\"Linting '\" + file + \"'\");\n        fileCount++;\n        if (!options.cache) {\n          lessFile = new LessFile(file, options, grunt);\n        } else {\n          lessFile = new LessCachedFile(file, options, grunt);\n        }\n        return lessFile.lint(function(err, result) {\n          var errorOutput, fileLintIssues, lintResult;\n          if (err != null) {\n            errorCount++;\n            grunt.log.writeln(err.message);\n            return callback();\n          }\n          result || (result = {});\n          lintResult = result.lint;\n          if (lintResult) {\n            results[file] = lintResult;\n            errorOutput = new LintErrorOutput(result, options, grunt);\n            fileLintIssues = errorOutput.display(options.imports);\n            errorCount += fileLintIssues.errors;\n            warningCount += fileLintIssues.warnings;\n          }\n          return callback();\n        });\n      });\n      this.filesSrc.forEach(function(file) {\n        return queue.push(file);\n      });\n      done = this.async();\n      queue.drain = function() {\n        var totalIssueCount;\n        writeToFormatters(options, results);\n        totalIssueCount = warningCount + errorCount;\n        if (totalIssueCount === 0) {\n          grunt.log.ok(fileCount + \" \" + (grunt.util.pluralize(fileCount, 'file/files')) + \" lint free.\");\n          return done();\n        } else {\n          grunt.log.writeln();\n          grunt.log.error(totalIssueCount + \" lint \" + (grunt.util.pluralize(totalIssueCount, 'issue/issues')) + \" in \" + fileCount + \" \" + (grunt.util.pluralize(fileCount, 'file/files')) + \" (\" + errorCount + \" \" + (grunt.util.pluralize(errorCount, 'error/errors')) + \", \" + warningCount + \" \" + (grunt.util.pluralize(warningCount, 'warning/warnings')) + \")\");\n          return done((!options.failOnError || errorCount === 0) && (!options.failOnWarning || warningCount === 0 || !options.failOnError));\n        }\n      };\n      if ((this.filesSrc == null) || this.filesSrc.length === 0) {\n        return done();\n      }\n    });\n    return grunt.registerTask('lesslint:clearCache', function() {\n      var cache, done;\n      done = this.async();\n      cache = new LintCache();\n      return cache.clear(function(err) {\n        if (err) {\n          grunt.log.error(err.message);\n        }\n        return done();\n      });\n    });\n  };\n\n  module.exports.CSSLint = CSSLint;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-grunt-lesslint/node_modules/grunt-lesslint/tasks/lib/lint-utils.js":"(function() {\n  var _, findLessMapping, findPropertyLineNumber, getPropertyName;\n\n  _ = require('lodash');\n\n  getPropertyName = function(line) {\n    var colon, curly, propertyName;\n    if (line == null) {\n      line = '';\n    }\n    line = line.trim();\n    if (line.slice(0, 2) === '/*') {\n      return null;\n    }\n    colon = line.indexOf(':');\n    if (colon > 0) {\n      propertyName = line.substring(0, colon);\n      curly = propertyName.indexOf('{');\n      if (curly !== -1) {\n        propertyName = propertyName.substring(curly + 1).trim();\n      }\n      return propertyName;\n    } else {\n      return null;\n    }\n  };\n\n  findLessMapping = function(css, lineNumber) {\n    var commentLine, filePath, lessLineNumber, lines, match;\n    if (css == null) {\n      css = '';\n    }\n    if (lineNumber == null) {\n      lineNumber = 0;\n    }\n    if (_.isString(css)) {\n      lines = css.split('\\n');\n    } else {\n      lines = css;\n    }\n    lineNumber = Math.max(0, Math.min(lineNumber, lines.length - 1));\n    commentLine = lineNumber;\n    lessLineNumber = -1;\n    while (commentLine >= 0) {\n      if (match = /^\\s*\\/\\* line (\\d+), (.+) \\*\\/\\s*$/.exec(lines[commentLine])) {\n        lineNumber = parseInt(match[1]) - 1;\n        filePath = match[2];\n        return {\n          lineNumber: lineNumber,\n          filePath: filePath\n        };\n      }\n      commentLine--;\n    }\n    return {\n      lineNumber: -1,\n      filePath: null\n    };\n  };\n\n  findPropertyLineNumber = function(contents, lineNumber, propertyName) {\n    var lines;\n    if (contents == null) {\n      contents = '';\n    }\n    if (lineNumber == null) {\n      lineNumber = 0;\n    }\n    if (propertyName == null) {\n      propertyName = '';\n    }\n    if (!(contents && propertyName)) {\n      return -1;\n    }\n    if (_.isString(contents)) {\n      lines = contents.split('\\n');\n    } else {\n      lines = contents;\n    }\n    lineNumber = Math.max(0, Math.min(lineNumber, lines.length - 1));\n    while (lineNumber < lines.length) {\n      if (propertyName === getPropertyName(lines[lineNumber])) {\n        return lineNumber;\n      }\n      lineNumber++;\n    }\n    return -1;\n  };\n\n  module.exports = {\n    getPropertyName: getPropertyName,\n    findLessMapping: findLessMapping,\n    findPropertyLineNumber: findPropertyLineNumber\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-grunt-lesslint/node_modules/grunt-lesslint/tasks/lib/lint-cache.js":"(function() {\n  var CacheSwap, LintCache, _, grunt, packageInfo, path,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  grunt = require('grunt');\n\n  CacheSwap = require('cache-swap');\n\n  path = require('path');\n\n  _ = require('lodash');\n\n  packageInfo = grunt.file.readJSON(path.resolve(path.join(__dirname, '..', '..', 'package.json')));\n\n  LintCache = (function(superClass) {\n    extend(LintCache, superClass);\n\n    LintCache.category = 'lesshashed';\n\n    function LintCache(opts) {\n      if (!_.isObject(opts)) {\n        opts = {};\n      }\n      LintCache.__super__.constructor.apply(this, arguments);\n      this.options.cacheDirName = \"lesslint-\" + packageInfo.version;\n    }\n\n    LintCache.prototype.clear = function(done) {\n      return LintCache.__super__.clear.call(this, LintCache.category, done);\n    };\n\n    LintCache.prototype.hasCached = function(hash, done) {\n      return LintCache.__super__.hasCached.call(this, LintCache.category, hash, done);\n    };\n\n    LintCache.prototype.getCached = function(hash, done) {\n      return LintCache.__super__.getCached.call(this, LintCache.category, hash, done);\n    };\n\n    LintCache.prototype.addCached = function(hash, done) {\n      return LintCache.__super__.addCached.call(this, LintCache.category, hash, '', done);\n    };\n\n    return LintCache;\n\n  })(CacheSwap);\n\n  module.exports = {\n    LintCache: LintCache\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-grunt-lesslint/node_modules/grunt-lesslint/tasks/lib/less-file.js":"(function() {\n  var CssLinter, LessCachedFile, LessFile, LessImportFile, LessParser, LintCache, chalk, crypto, sharedImportsContents,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  crypto = require('crypto');\n\n  LessParser = require('./less-parser');\n\n  CssLinter = require('./css-linter');\n\n  LintCache = require('./lint-cache').LintCache;\n\n  chalk = require('chalk');\n\n  LessFile = (function() {\n    function LessFile(filePath, options, grunt) {\n      this.filePath = filePath;\n      this.options = options != null ? options : {};\n      this.grunt = grunt;\n    }\n\n    LessFile.prototype.lint = function(callback) {\n      return this.getCss((function(_this) {\n        return function(err, css, sourceMap) {\n          if (err) {\n            return callback(new Error(\"Error parsing \" + (chalk.yellow(_this.filePath)) + \": \" + err.message));\n          }\n          return _this.lintCss(css, function(err, lintResult) {\n            var ref, result;\n            if (err) {\n              return callback(new Error(\"Error linting \" + (chalk.yellow(_this.filePath)) + \": \" + err.message));\n            }\n            result = {\n              file: _this.filePath,\n              less: _this.getContents(),\n              css: css,\n              sourceMap: sourceMap\n            };\n            if ((lintResult != null ? (ref = lintResult.messages) != null ? ref.length : void 0 : void 0) > 0) {\n              result.lint = lintResult;\n            }\n            return callback(null, result);\n          });\n        };\n      })(this));\n    };\n\n    LessFile.prototype.lintCss = function(css, callback) {\n      var linter;\n      linter = new CssLinter(this.options, this.grunt);\n      return linter.lint(css, callback);\n    };\n\n    LessFile.prototype.getContents = function(forced) {\n      if ((this.contents != null) && !forced) {\n        return this.contents;\n      }\n      return this.contents = this.grunt.file.read(this.filePath);\n    };\n\n    LessFile.prototype.getDigest = function() {\n      if (this.digest) {\n        return this.digest;\n      }\n      this.digest = crypto.createHash('sha256').update(this.getContents()).digest('base64');\n      return this.digest;\n    };\n\n    LessFile.prototype.getCss = function(callback) {\n      var contents, parser;\n      contents = this.getContents();\n      if (!contents) {\n        return callback(null, '');\n      }\n      parser = new LessParser(this.filePath, this.options);\n      return parser.render(contents, callback);\n    };\n\n    return LessFile;\n\n  })();\n\n  sharedImportsContents = {};\n\n  LessImportFile = (function(superClass) {\n    extend(LessImportFile, superClass);\n\n    function LessImportFile() {\n      return LessImportFile.__super__.constructor.apply(this, arguments);\n    }\n\n    LessImportFile.prototype.getContents = function() {\n      var contents, name, ref;\n      if ((ref = sharedImportsContents[this.filePath]) != null ? ref.contents : void 0) {\n        return sharedImportsContents[this.filePath].contents;\n      }\n      contents = LessImportFile.__super__.getContents.call(this);\n      sharedImportsContents[name = this.filePath] || (sharedImportsContents[name] = {});\n      return sharedImportsContents[this.filePath].contents = contents;\n    };\n\n    LessImportFile.prototype.getDigest = function() {\n      var digest, name, ref;\n      if ((ref = sharedImportsContents[this.filePath]) != null ? ref.digest : void 0) {\n        return sharedImportsContents[this.filePath].digest;\n      }\n      digest = LessImportFile.__super__.getDigest.call(this);\n      sharedImportsContents[name = this.filePath] || (sharedImportsContents[name] = {});\n      return sharedImportsContents[this.filePath].digest = digest;\n    };\n\n    return LessImportFile;\n\n  })(LessFile);\n\n  LessCachedFile = (function(superClass) {\n    extend(LessCachedFile, superClass);\n\n    function LessCachedFile(filePath, options, grunt) {\n      this.filePath = filePath;\n      this.options = options != null ? options : {};\n      this.grunt = grunt;\n      LessCachedFile.__super__.constructor.apply(this, arguments);\n      this.cache = new LintCache(this.options.cache);\n    }\n\n    LessCachedFile.prototype.lint = function(callback) {\n      var hash;\n      hash = this.getDigest();\n      return this.cache.hasCached(hash, (function(_this) {\n        return function(isCached, cachedPath) {\n          if (isCached) {\n            _this.grunt.event.emit('lesslint.cache.hit', _this.filePath, cachedPath, hash);\n            return callback();\n          }\n          return LessFile.prototype.lint.call(_this, function(err, result, less, css) {\n            if (err) {\n              return callback(err);\n            }\n            if (result.lint != null) {\n              return callback(null, result, less, css);\n            }\n            return _this.cache.addCached(hash, function(err, cachedAddPath) {\n              if (err) {\n                return callback(err);\n              }\n              _this.grunt.event.emit('lesslint.cache.add', _this.filePath, hash, cachedAddPath);\n              return callback(null, result, less, css);\n            });\n          });\n        };\n      })(this));\n    };\n\n    LessCachedFile.prototype.getDigest = function() {\n      var importsContents, myHash;\n      myHash = LessCachedFile.__super__.getDigest.call(this);\n      if (this.options.imports == null) {\n        return myHash;\n      }\n      importsContents = this.getImportsContents();\n      return crypto.createHash('sha256').update(myHash).update(importsContents.join('')).digest('base64');\n    };\n\n    LessCachedFile.prototype.getImportsContents = function() {\n      var i, importFilePath, len, ref, results;\n      ref = this.grunt.file.expand(this.options.imports);\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        importFilePath = ref[i];\n        results.push(new LessImportFile(importFilePath, {}, this.grunt).getDigest());\n      }\n      return results;\n    };\n\n    return LessCachedFile;\n\n  })(LessFile);\n\n  module.exports = {\n    LessFile: LessFile,\n    LessImportFile: LessImportFile,\n    LessCachedFile: LessCachedFile\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-grunt-lesslint/node_modules/grunt-lesslint/tasks/lib/less-parser.js":"(function() {\n  var LessParser, _, defaultLessOptions, less, path;\n\n  path = require('path');\n\n  _ = require('lodash');\n\n  less = require('less');\n\n  defaultLessOptions = {\n    cleancss: false,\n    compress: false,\n    dumpLineNumbers: 'comments',\n    optimization: null,\n    syncImport: true\n  };\n\n  module.exports = LessParser = (function() {\n    function LessParser(fileName, opts) {\n      var paths;\n      opts = _.defaults(opts.less || {}, defaultLessOptions);\n      paths = [path.dirname(path.resolve(fileName))];\n      if (opts.paths) {\n        paths = paths.concat(opts.paths);\n      }\n      this.opts = _.defaults({\n        filename: path.resolve(fileName),\n        paths: paths,\n        sourceMap: {}\n      }, opts);\n    }\n\n    LessParser.prototype.render = function(contents, callback) {\n      var err, error;\n      try {\n        return less.render(contents, this.opts, function(err, output) {\n          return callback(err, output != null ? output.css : void 0, output != null ? output.map : void 0);\n        });\n      } catch (error) {\n        err = error;\n        return callback(err);\n      }\n    };\n\n    return LessParser;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-grunt-lesslint/node_modules/grunt-lesslint/tasks/lib/css-linter.js":"(function() {\n  var CSSLint, CssLinter, RuleLoader, _, stripJsonComments;\n\n  CSSLint = require('csslint').CSSLint;\n\n  _ = require('lodash');\n\n  RuleLoader = require('./rule-loader');\n\n  stripJsonComments = require('strip-json-comments');\n\n  module.exports = CssLinter = (function() {\n    function CssLinter(options, grunt) {\n      this.options = options;\n      this.grunt = grunt;\n    }\n\n    CssLinter.prototype.lint = function(css, callback) {\n      var cssLintOptions, disabledRules, enabled, externalOptions, i, id, len, ref, result, rules;\n      if (!css) {\n        return callback(null, []);\n      }\n      externalOptions = {};\n      disabledRules = RuleLoader.getRuleLoader(this.grunt).configureRules(this.options);\n      rules = _.reduce(CSSLint.getRules(), function(memo, arg) {\n        var id;\n        id = arg.id;\n        memo[id] = 1;\n        return memo;\n      }, {});\n      cssLintOptions = this.options.csslint;\n      if (cssLintOptions != null ? cssLintOptions.csslintrc : void 0) {\n        externalOptions = JSON.parse(stripJsonComments(this.grunt.file.read(cssLintOptions.csslintrc)));\n        delete cssLintOptions.csslintrc;\n      }\n      _.extend(cssLintOptions, externalOptions);\n      for (id in cssLintOptions) {\n        enabled = cssLintOptions[id];\n        if (cssLintOptions[id]) {\n          rules[id] = cssLintOptions[id];\n        } else {\n          delete rules[id];\n        }\n      }\n      for (i = 0, len = disabledRules.length; i < len; i++) {\n        id = disabledRules[i];\n        if (id in rules) {\n          delete rules[id];\n        }\n      }\n      result = CSSLint.verify(css, rules);\n      if (((ref = result.messages) != null ? ref.length : void 0) > 0) {\n        return callback(null, result);\n      } else {\n        return callback();\n      }\n    };\n\n    return CssLinter;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-grunt-lesslint/node_modules/grunt-lesslint/tasks/lib/rule-loader.js":"(function() {\n  var CSSLint, RuleLoader, RuleLoaderFactory, _, path,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  CSSLint = require('csslint').CSSLint;\n\n  path = require('path');\n\n  _ = require('lodash');\n\n  module.exports = RuleLoaderFactory = (function() {\n    var instance;\n\n    function RuleLoaderFactory() {}\n\n    instance = null;\n\n    RuleLoaderFactory.getRuleLoader = function(grunt) {\n      if (!instance) {\n        instance = new RuleLoader(grunt, require);\n      }\n      return instance;\n    };\n\n    return RuleLoaderFactory;\n\n  })();\n\n  module.exports.RuleLoader = RuleLoader = (function() {\n    function RuleLoader(grunt1, require1) {\n      this.grunt = grunt1;\n      this.require = require1;\n      this.rulesPerFile = {};\n    }\n\n    RuleLoader.prototype.configureRules = function(options) {\n      var enabledRules;\n      enabledRules = this.enableConfiguredRuleFiles(options);\n      return this.getDisabledRules(enabledRules, options);\n    };\n\n    RuleLoader.prototype.enableConfiguredRuleFiles = function(options) {\n      var customRules, enabledRules, id, ruleFile, ruleFiles;\n      enabledRules = [];\n      customRules = options.customRules;\n      if (customRules != null) {\n        ruleFiles = this.grunt.file.expand(customRules);\n        for (id in ruleFiles) {\n          ruleFile = ruleFiles[id];\n          enabledRules = _.union(enabledRules, this.enableRuleFile(ruleFile));\n        }\n      }\n      return enabledRules;\n    };\n\n    RuleLoader.prototype.enableRuleFile = function(ruleFile) {\n      var newRules, rulesBefore;\n      if (!(ruleFile in this.rulesPerFile)) {\n        this.grunt.verbose.writeln('Loading custom rules from ' + ruleFile.cyan);\n        rulesBefore = this.getCurrentRuleNames();\n        this.require(path.resolve(ruleFile));\n        newRules = this.getNewRuleNames(rulesBefore);\n        this.rulesPerFile[ruleFile] = newRules;\n      } else {\n        newRules = this.rulesPerFile[ruleFile];\n      }\n      return newRules;\n    };\n\n    RuleLoader.prototype.getCurrentRuleNames = function() {\n      return _.keys(CSSLint.getRuleset());\n    };\n\n    RuleLoader.prototype.getNewRuleNames = function(previousRuleNames) {\n      return _.difference(this.getCurrentRuleNames(), previousRuleNames);\n    };\n\n    RuleLoader.prototype.getDisabledRules = function(enabledRules, options) {\n      var configuredRules;\n      configuredRules = _.keys(options.csslint);\n      return _(this.rulesPerFile).values().flatten().filter(function(rule) {\n        return indexOf.call(enabledRules, rule) < 0 && indexOf.call(configuredRules, rule) < 0;\n      }).value();\n    };\n\n    return RuleLoader;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-grunt-lesslint/node_modules/grunt-lesslint/tasks/lib/lint-error-output.js":"(function() {\n  var LintErrorOutput, SourceMapConsumer, _, chalk, path, stripPath;\n\n  path = require('path');\n\n  SourceMapConsumer = require('source-map').SourceMapConsumer;\n\n  _ = require('lodash');\n\n  chalk = require('chalk');\n\n  stripPath = require('strip-path');\n\n  LintErrorOutput = (function() {\n    function LintErrorOutput(result, options, grunt) {\n      this.result = result;\n      this.options = options;\n      this.grunt = grunt;\n    }\n\n    LintErrorOutput.prototype.display = function(importsToLint) {\n      var column, file, fileContents, fileLines, filePath, fullRuleMessage, i, isThisFile, issueCounts, len, less, lessSource, line, message, messageGroups, messages, output, ref, rule, ruleMessages, source, sourceMap;\n      sourceMap = new SourceMapConsumer(this.result.sourceMap);\n      issueCounts = {\n        warnings: 0,\n        errors: 0\n      };\n      messages = this.result.lint.messages;\n      less = this.result.less;\n      file = path.resolve(this.result.file);\n      filePath = stripPath(file, process.cwd());\n      fileContents = {};\n      fileLines = {};\n      messages = messages.filter((function(_this) {\n        return function(message) {\n          var isThisFile, source, sourceArray;\n          if (message.line === 0 || message.rollup) {\n            return true;\n          }\n          source = sourceMap.originalPositionFor({\n            line: message.line,\n            column: message.col\n          }).source;\n          if (source === null) {\n            return false;\n          }\n          if (source) {\n            source = path.resolve(source);\n          }\n          isThisFile = source === file;\n          sourceArray = [stripPath(source, process.cwd()), stripPath(source, process.cwd() + '\\\\')];\n          return isThisFile || _this.grunt.file.isMatch(importsToLint, sourceArray);\n        };\n      })(this));\n      if (messages.length < 1) {\n        return issueCounts;\n      }\n      this.result.lint.messages = messages;\n      messageGroups = _.groupBy(messages, function(arg) {\n        var fullMsg, message, rule, type;\n        message = arg.message, rule = arg.rule, type = arg.type;\n        fullMsg = \"\" + message;\n        if ((type != null) && type.length !== 0) {\n          fullMsg = \"\" + fullMsg;\n        }\n        if (rule.desc && rule.desc !== message) {\n          fullMsg += \" \" + rule.desc;\n        }\n        return fullMsg;\n      });\n      this.grunt.log.writeln((chalk.yellow(filePath)) + \" (\" + messages.length + \")\");\n      for (fullRuleMessage in messageGroups) {\n        ruleMessages = messageGroups[fullRuleMessage];\n        rule = ruleMessages[0].rule;\n        this.grunt.log.writeln(fullRuleMessage + chalk.grey(\" (\" + rule.id + \")\"));\n        for (i = 0, len = ruleMessages.length; i < len; i++) {\n          message = ruleMessages[i];\n          if (message.type === 'error') {\n            issueCounts.errors += 1;\n          } else {\n            issueCounts.warnings += 1;\n          }\n          if (message.line === 0 || message.rollup) {\n            continue;\n          }\n          ref = sourceMap.originalPositionFor({\n            line: message.line,\n            column: message.col\n          }), line = ref.line, column = ref.column, source = ref.source;\n          isThisFile = source === file;\n          message.lessLine = {\n            line: line,\n            column: column\n          };\n          if (!fileContents[source]) {\n            if (isThisFile) {\n              fileContents[source] = less;\n            } else {\n              fileContents[source] = this.grunt.file.read(source);\n            }\n            fileLines[source] = fileContents[source].split('\\n');\n          }\n          filePath = stripPath(source, process.cwd());\n          lessSource = fileLines[source][line - 1].slice(column);\n          output = chalk.gray(filePath + \" [Line \" + line + \", Column \" + (column + 1) + \"]:\\t\") + (\" \" + (lessSource.trim()));\n          if (this.options.failOnError && (message.type === 'error' || this.options.failOnWarning)) {\n            this.grunt.log.error(output);\n          } else {\n            this.grunt.log.writeln(\"   \" + output);\n          }\n        }\n      }\n      return issueCounts;\n    };\n\n    return LintErrorOutput;\n\n  })();\n\n  module.exports = LintErrorOutput;\n\n}).call(this);\n"}